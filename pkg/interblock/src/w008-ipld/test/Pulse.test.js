import { assert } from 'chai/index.mjs'
import { Pulse, Address, Keypair } from '..'
import Debug from 'debug'
const debug = Debug('interblock:tests:Pulse')

describe('Pulse', () => {
  test('basic', async () => {
    let pulse = await Pulse.createCI()
    pulse = await pulse.crushToCid()
    const address = Address.generate(pulse)
    expect(address.toString()).toMatchSnapshot()
  })
  test('birth child', async () => {
    const timer = debug.extend('timer')
    timer('start')
    let parent = await Pulse.createCI()
    timer('create CI')
    parent = await parent.generateSoftPulse()
    timer('softpulse')
    const config = { entropy: { seed: 'test' } }
    parent = await parent.addChild('child1', { config })
    timer('add child')
    parent = await parent.crushToCid()
    timer('crush')
    const keypair = Keypair.createCI()
    timer('ci keypair')
    let signature = await keypair.sign(parent.provenance)
    timer('sign')
    assert.throws(() => Address.generate(parent), 'must be genesis')
    timer('throw test')
    assert(!parent.isVerified())
    parent = parent.addSignature(keypair.publicKey, signature)
    assert(!parent.isVerified())
    timer('add sig')
    parent = await parent.crushToCid()
    timer('crush')
    assert(parent.isVerified())
  })
  test.todo('loopback transmissions')
  test.todo('loopback promises')
  test.todo('receive interpulse')
  test.todo('remove transmission')
  test.todo('softpulse for pooling')
  test.todo('genesis pulse')
  test.todo('pierce pulse')
  test.todo('pending')
  test.todo('public connection')
  test.todo('precedent multiple pulses ahead')
})
