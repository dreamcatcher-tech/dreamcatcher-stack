// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`callsites basics nested parallel hooks do not collide 1`] = `
Array [
  Reduction {
    "reply": Reply {
      "payload": Object {},
      "type": "@@PROMISE",
    },
    "txs": Array [
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 0 depth: 4",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 0 depth: 3",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 0 depth: 2",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 0 depth: 1",
        },
        "to": ".",
      },
    ],
  },
  Reduction {
    "reply": Reply {
      "payload": Object {},
      "type": "@@PROMISE",
    },
    "txs": Array [
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 1 depth: 5",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 1 depth: 4",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 1 depth: 3",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 1 depth: 2",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 1 depth: 1",
        },
        "to": ".",
      },
    ],
  },
  Reduction {
    "reply": Reply {
      "payload": Object {},
      "type": "@@PROMISE",
    },
    "txs": Array [
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 2 depth: 6",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 2 depth: 5",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 2 depth: 4",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 2 depth: 3",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 2 depth: 2",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 2 depth: 1",
        },
        "to": ".",
      },
    ],
  },
  Reduction {
    "reply": Reply {
      "payload": Object {},
      "type": "@@PROMISE",
    },
    "txs": Array [
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 3 depth: 7",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 3 depth: 6",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 3 depth: 5",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 3 depth: 4",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 3 depth: 3",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 3 depth: 2",
        },
        "to": ".",
      },
      AsyncRequest {
        "request": Request {
          "payload": Object {},
          "type": "id: 3 depth: 1",
        },
        "to": ".",
      },
    ],
  },
]
`;

exports[`callsites with accumulator single await 1`] = `
AsyncRequest {
  "request": Request {
    "payload": Object {},
    "type": "single",
  },
  "to": ".",
}
`;

exports[`callsites with asyncs single await 1`] = `
AsyncRequest {
  "request": Request {
    "payload": Object {},
    "type": "single",
  },
  "to": ".",
}
`;
